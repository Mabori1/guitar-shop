openapi: 3.0.3
info:
  title: API сервер для проекта "Магазин гитар"
  description: Список ресурсов и маршрутов для сервера "Магазин гитар"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: users
    description: Действия с пользователем
  - name: product-list
    description: Действия с товарами
  - name: auth
    description: Авторизация и аутентификация

paths:
  /products:
    get:
      tags:
        - product-list
      summary: Получение списка товаров
      parameters:
        - name: page
          in: query
          description: Номер страницы
          required: false
          schema:
            type: integer
        - name: guitarType
          in: query
          description: Тип гитары
          required: false
          schema:
            type: string
        - name: stringCount
          in: query
          description: Количество струн
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Items on page
          required: false
          schema:
            type: integer
        - name: sort
          in: query
          description: Опции сортировки
          required: false
          schema:
            type: string
            enum: [priceAsc, priceDesc, dateAsc, dateDesc]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - product-list
      summary: Создание нового товара
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      tags:
        - product-list
      summary: Получение товара по идентификационному номеру
      parameters:
        - name: productId
          in: path
          description: Идентификатор товара
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      tags:
        - product-list
      summary: Обновление товара по идентификационному номеру
      parameters:
        - name: productId
          in: path
          description: Идентификатор товара
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - product-list
      summary: Удаление товара по идентификационному номеру
      parameters:
        - name: productId
          in: path
          description: Идентификационный номер
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /users:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - auth
      summary: Аутентификация и получение токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/check:
    get:
      tags:
        - auth
      summary: Проверка авторизации пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        photo:
          type: string
        guitarType:
          type: string
        stringCount:
          type: integer
        price:
          type: number
      required:
        - id
        - title
        - description
        - photo
        - guitarType
        - stringCount
        - price

    ProductInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        photo:
          type: string
        guitarType:
          type: string
        stringCount:
          type: integer
        price:
          type: number
      required:
        - title
        - description
        - photo
        - guitarType
        - stringCount
        - price

    ProductUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        photo:
          type: string
        guitarType:
          type: string
        stringCount:
          type: integer
        price:
          type: number

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
      required:
        - id
        - name
        - email

    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password

    LoginInput:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mabori/Guitar-shop/1.0.0
